# -*- coding: utf-8 -*-
"""Practica7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vbhhUFTbe86ZepZJS7GC0o9ctqW68-F7
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
from google.colab import drive
drive.mount('/content/drive')

ImagesNames = []
for i in range(37):
  ImagesNames.append(f"/content/drive/MyDrive/regla/{int(10*i)}Grados.jpg")

print(ImagesNames)

Images = {}
for image in ImagesNames:
  Images[image] = imread(image)
  pause(2)
  clf()

ImagesRed = {}
ImagesGreen = {}
ImagesBlue = {}
for image in Images:
  ImagesRed[image] = Images[image].copy()
  ImagesRed[image][:,:,1] = 0
  ImagesRed[image][:,:,2] = 0

  ImagesGreen[image] = Images[image].copy()
  ImagesGreen[image][:,:,0] = 0
  ImagesGreen[image][:,:,2] = 0

  ImagesBlue[image] = Images[image].copy()
  ImagesBlue[image][:,:,0] = 0
  ImagesBlue[image][:,:,1] = 0

ImagesRedSubMats = {}
ImagesGreenSubMats = {}
ImagesBlueSubMats = {}

import numpy as np
for image in Images:
  ImagesRedSubMats[image] = ImagesRed[image][1500:1503,2000:2003,0]
  ImagesGreenSubMats[image] = ImagesGreen[image][1500:1503,2000:2003,1]
  ImagesBlueSubMats[image] = ImagesBlue[image][1500:1503,2000:2003,2]

print(ImagesRedSubMats["/content/drive/MyDrive/regla/0Grados.jpg"])
print(ImagesGreenSubMats["/content/drive/MyDrive/regla/0Grados.jpg"])
print(ImagesBlueSubMats["/content/drive/MyDrive/regla/0Grados.jpg"])

ImagesRedResults = {}
ImagesGreenResults = {}
ImagesBlueResults = {}
import numpy as np
import pandas as pd
for image in Images:
  ImagesRedResults[image] = {"mean":np.mean(ImagesRed[image][1500:1503,2000:2003,0]),"std":np.std(ImagesRed[image][1500:1503,2000:2003,0])}
  ImagesGreenResults[image] = {"mean":np.mean(ImagesGreen[image][1500:1503,2000:2003,1]),"std":np.std(ImagesGreen[image][1500:1503,2000:2003,1])}
  ImagesBlueResults[image] = {"mean":np.mean(ImagesBlue[image][1500:1503,2000:2003,2]),"std":np.std(ImagesBlue[image][1500:1503,2000:2003,2])}  

ImagesRedResults = pd.DataFrame(ImagesRedResults).T
ImagesGreenResults = pd.DataFrame(ImagesGreenResults).T
ImagesBlueResults = pd.DataFrame(ImagesBlueResults).T

print(ImagesRedResults)
print(ImagesGreenResults)
print(ImagesBlueResults)

Angs = np.arange(0,37,1)*10*np.pi/180
errorbar(Angs,ImagesRedResults["mean"],yerr=ImagesRedResults["std"],ls="none",c="r",marker="D",ms=2,lw=1,markeredgecolor="b")

errorbar(Angs,ImagesGreenResults["mean"],yerr=ImagesGreenResults["std"],ls="none",c="r",marker="D",ms=2,lw=1,markeredgecolor="b")

#esto es un comentario

errorbar(Angs,ImagesBlueResults["mean"],yerr=ImagesBlueResults["std"],ls="none",c="r",marker="D",ms=2,lw=1,markeredgecolor="b")

i=0
red=[]
blue=[]
green=[]
ang=[]
#Punto 9
for image in ImagesRed:
  a = ImagesRed[image]
  b = a[1520:1523,2020:2023]
  red.append(b.mean())
  ang.append(i)
  i = i + 10
red=array(red)
ang=array(ang)


for image in ImagesGreen:
  a = ImagesGreen[image]
  b = a[1520:1523,2020:2023]
  blue.append(b.mean())
blue=array(blue)

for image in ImagesBlue:
  a = ImagesBlue[image]
  b = a[1520:1523,2020:2023]
  green.append(b.mean())
green=array(green)


figsize(5,5)
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(ang*2*pi/360, red-red.min(), 'r')
ax.plot(ang*2*pi/360, green-green.min(), 'b')
ax.plot(ang*2*pi/360, blue-blue.min(), 'g')
ax.set_rmax(15)
ax.set_rticks([5, 15 ,30])  # Less radial ticks
#ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

